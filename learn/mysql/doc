                      **MySQL 5.6 手册**
6.1 安全
(永远不要给任何人访问数据库中的user表)
show grants for 'usrname'@'localhos'  查看用户权限
revoke      删除哪些不要的权限
shell> tcpdump -l -i eth0 -w - src or dst port 3306 | strings 
（未加密 查看 sql 内容）




================用户账户(权限）==============
1 通过mysql语句
创建用户  CREATE USER
   ''@'%' (用户名为空，主机为空）表示任何用户从任何主机
   create user 'usename'@'localhost' identified by 'password'; 
授权      GRANT
   GRANT [priv_type]  on  [object-type] priv_level  to  [user]
   grant all  on  service_finder.* to 'k'@'192.168.1.109' 
      权限     库名.*(通配符号)          帐户名         
                 *.*
                 *
mysql> grant update,select on design.* to 'k'@'127.0.0.1';
授权  更新，查询  在 库design的所有表中  给 用k

删除用户帐户  DROP
    DROP USER ‘username'@'localhost'

重置密码 SET PASSWORD 
    SET PASSWORD FOR ’username‘@’localhost'= PASSWORD('password');
2 通过修改授权表
..............
================备份恢复==============
二进制日志
启动二进制日志 
    service start --log-bin[=base name]
    show binary logs; 显示二进制日志文件

================优化==============
数据库级别进行优化
select语句
 


===============语言结构=============


===============复制=============(未成功）
1设置复制主配置
    配置my.cnf文件
    添加 log-bin = 'name‘
    添加 server-id =1 (任意)
    restart
2设置复制从配置
    server-id =2;
3创建复制用户
    create user 'name'@'localhost' identified by 'password'
    grant replication slave on *.* to 'name'@'localhost';
4获取复制主二进制日志坐标
    show master status 获取当前二进制日志文件名称和位置
*5 如果主服务器上已经有数据并希望使用它来同步从服务器则需要创建数据快照
 (1)  使用mysqldump 创建数据快照 (提示检查版本 语法不正确）
      mysqldump --all-databases --master-data > dbdump.db
      在新的服务器执行
      shell> mysql -h master < fulldb.dump
 (2)  使用原始数据  （仍然失败）
      shell> mysqladmin shutdown  （关闭主服务器）
      


6  在从站上设置主站配置

7启动复制
  start slave

一使用新主站和从站设置复制
二使用现有数据设置复制
三将节点添加到现有的复制环境



===============分区=================================
(查询分区内容）
mysql> SELECT PARTITION_NAME,TABLE_ROWS  （查询分区名，行数）
    ->     FROM INFORMATION_SCHEMA.PARTITIONS  (系统仓库）
    ->     WHERE TABLE_NAME = 'r1'; (r1 是创建时的表名）
================================================
分区类型：
  1范围分区
  2列表分区
  3hash分区
  4key 分区

(1)范围分区 
CREATE TABLE  r1 (
    id INT NOT NULL,
    name VARCHAR(30),
    size INT NOT null
)
PARTITION BY RANGE (size) (
    PARTITION r1 VALUES LESS THAN (10),
    PARTITION r2 VALUES LESS THAN  MAXVALUE
);
（根据 size的大小 放入相应分区）
-----------------------------------------------------------
(2) range columns 分区
    列分区 基于元祖之间的比较（列值和表），而不是标量值之间的比较
   create table rcx( 
       a int,
       b int
 )
 partition by range columns(a,b) (
     partition rcx1 values less than (5,10),
     partition rcx2 values less than (10,20)
);
cloumn_list 是一列或多列 
 
===============存储程序(函数）=================================
MySQL支持存储的例程（过程和函数）。存储的例程是一组可存储在服务器中的SQL语句。完成此操作后，客户端不需要重新发布单个语句，而是可以引用存储的例程。
存储的例程在某些情况下特别有用：
当多个客户端应用程序以不同语言编写或在不同平台上工作时，需要执行相同的数据库操作。

安全至关重要时。例如，银行为所有常见操作使用存储过程和函数。这提供了一致且安全的环境，并且例程可以确保每个操作都被正确记录。在这样的设置中，应用程序和用户将不能直接访问数据库表，但只能执行特定的存储例程。
创建
create procedure 例程
create function  函数
使用 
call  
删除
drop procedure
drop function 
更改
alter procedure
alter function 
可以使用数据哭名称限定例程名称
当数据库被删除时 所有与其关联的存储例程也会被删除

-----------触发器-------
create table  trigger ( a int ,b int);

create trigger trig before insert on triggers for 
each row set @sum = @sum + a;






procedure [程序，手续]
;号转义 delimiter //
create procedure dorepeat(p1 int)
begin 
   set @x = 0;
   repeat set @x =@x+1;
   until @x > p1 end repeat;
end;
//
delimiter ;
call dorepeat(1000);
select @x;


设置数据库支持中文 对已经建立的库有效 alter table table_name convert to character set utf8;


备份与恢复
备份  包含用户信息(未知是否能用）
root@ki://home/k# mysqldump -uroot -pxingke  --all-databases >/home/k/dump.sql
                                                                            所有的库                              转储文件
恢复
mysql  -uroot -pxingke  < dump.sql
       












